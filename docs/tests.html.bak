<!DOCTYPE html>

<html>
<head>
  <title>tests</title>
  <meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <link rel="stylesheet" media="all" href="locco.css" />
<link rel="shortcut icon" type="image/x-icon" href="https://raw.githubusercontent.com/lualure/info/master/img/favicon.ico"></head>
<body>
  <div id="container">
    <div id="background"></div>
    
    <table cellpadding="0" cellspacing="0">
      <thead>
        <tr>
          <th class="docs">
            <h1>
              /Users/timm/src/lib/tests.lua
            </h1>
          </th>
          <th class="code">
          </th>
        </tr>
      </thead>
      <tbody>
<tr id="section-1">
<td class="docs">
  <div class="pilwrap">
    <a class="pilcrow" href="#section-1">&#182;</a>
  </div>
  
<h2>Simple unit tests</h2>

<p><em>tim@menzies.us</em> <br/>
<em>August'17</em>   </p>

<p>Standard usage:</p>

<p>   require "show"
   local O=require "tests"</p>

<p>   local function _num1()</p>
<pre><code> local NUM=require "num"
 local  i = NUM.create()
 for _,x in pairs{9,2,5,4,12,7,8,11,9,3,7,4,12,5,4,10,9,6,9,4} do
   NUM.update(i,x) 
 end
 assert(i.mu == 7)
</code></pre>

<p>   O.k{_num1}</p>

<hr/>
<p>Track and report the <code>pass</code>, <code>fail</code> counts.</p>


</td>
<td class="code">
  <div class="highlight"><pre><span class="k">local</span> pass,fail = 0,0

<span class="k">local</span> <span class="k">function</span> <span class="nf">report</span>() 
  <span class="nt">print</span>(string.format(
        <span class="s">":pass &#37;s :fail &#37;s :percentPass &#37;.0f&#37;&#37;"</span>,
         pass, fail, 100*pass/(0.001+pass+fail))) <span class="k">end</span>
</pre></div>
</td>
</tr><tr id="section-2">
<td class="docs">
  <div class="pilwrap">
    <a class="pilcrow" href="#section-2">&#182;</a>
  </div>
  
<hr/>
<p>Report stray globals, skipping the built-ins.</p>


</td>
<td class="code">
  <div class="highlight"><pre>
<span class="k">local</span> builtin = { 
  math=<span class="k">true</span>, package=<span class="k">true</span>, 
  table=<span class="k">true</span>, coroutine=<span class="k">true</span>, os=<span class="k">true</span>, 
  io=<span class="k">true</span>, bit32=<span class="k">true</span>, string=<span class="k">true</span>, 
  arg=<span class="k">true</span>, debug=<span class="k">true</span>, _VERSION=<span class="k">true</span>, _G=<span class="k">true</span>,
  <span class="nt">load</span>=<span class="k">true</span>, <span class="nt">xpcall</span>=<span class="k">true</span>, <span class="nt">type</span>=<span class="k">true</span>, <span class="nt">print</span>=<span class="k">true</span>,
  <span class="nt">pcall</span>=<span class="k">true</span>, <span class="nt">require</span>=<span class="k">true</span>, <span class="nt">tonumber</span>=<span class="k">true</span>,
  <span class="nt">getmetatable</span>=<span class="k">true</span>, <span class="nt">setmetatable</span>=<span class="k">true</span>, <span class="nt">ipairs</span>=<span class="k">true</span>,
  <span class="nt">tostring</span>=<span class="k">true</span>, <span class="nt">loadfile</span>=<span class="k">true</span>, <span class="nt">collectgarbage</span>=<span class="k">true</span>,
  <span class="nt">next</span>=<span class="k">true</span>, <span class="nt">rawequal</span>=<span class="k">true</span>, <span class="nt">rawget</span>=<span class="k">true</span>, rawlen=<span class="k">true</span>,
  <span class="nt">pairs</span>=<span class="k">true</span>, <span class="nt">error</span>=<span class="k">true</span>, <span class="nt">dofile</span>=<span class="k">true</span>, <span class="nt">unpack</span>=<span class="k">true</span>,
  select=<span class="k">true</span>, <span class="nt">loadstring</span>=<span class="k">true</span>, <span class="nt">module</span>=<span class="k">true</span>, <span class="nt">assert</span>=<span class="k">true</span>,
  <span class="nt">rawset</span>=<span class="k">true</span>, gcinfo=<span class="k">true</span>, <span class="nt">setfenv</span>=<span class="k">true</span>, jit=<span class="k">true</span>,
  bit=<span class="k">true</span>, newproxy=<span class="k">true</span>, <span class="nt">getfenv</span>=<span class="k">true</span>}

<span class="k">local</span> <span class="k">function</span> <span class="nf">globals</span>()
  <span class="k">for</span> k,v <span class="k">in</span> <span class="nt">pairs</span>( _G ) <span class="k">do</span>
</pre></div>
</td>
</tr><tr id="section-3">
<td class="docs">
  <div class="pilwrap">
    <a class="pilcrow" href="#section-3">&#182;</a>
  </div>
  
<p>if type(v) ~= 'function' then  </p>


</td>
<td class="code">
  <div class="highlight"><pre>       <span class="k">if</span> <span class="o">not</span> builtin[k] <span class="k">then</span> 
         <span class="nt">print</span>(<span class="s">"-- Global: "</span> .. k) <span class="k">end</span> <span class="k">end</span> <span class="k">end</span> <span class="c">--end
</span></pre></div>
</td>
</tr><tr id="section-4">
<td class="docs">
  <div class="pilwrap">
    <a class="pilcrow" href="#section-4">&#182;</a>
  </div>
  
<hr/>
<p>Call all the functions in the list <code>t</code>.
Update the <code>pass</code> and <code>fail</code> counts.</p>


</td>
<td class="code">
  <div class="highlight"><pre>
<span class="k">local</span> <span class="k">function</span> <span class="nf">tests</span>(t)
  <span class="k">for</span> s,x <span class="k">in</span> <span class="nt">pairs</span>(t) <span class="k">do</span>  
    <span class="nt">print</span>(<span class="s">"# test:"</span>, s) 
    pass = pass + 1
    <span class="k">local</span> t1= os.clock()
    <span class="k">local</span> passed,err = <span class="nt">pcall</span>(x) 
    <span class="k">local</span> t2= os.clock()
    <span class="nt">print</span>((t2-t1) .. <span class="s">" secs"</span>)
    <span class="k">if</span> <span class="o">not</span> passed <span class="k">then</span>   
       fail = fail + 1
       <span class="nt">print</span>(<span class="s">"Failure: "</span>.. err) <span class="k">end</span> <span class="k">end</span> <span class="k">end</span>
</pre></div>
</td>
</tr><tr id="section-5">
<td class="docs">
  <div class="pilwrap">
    <a class="pilcrow" href="#section-5">&#182;</a>
  </div>
  
<hr/>
<p>Help for comparing real numbers. Converts them to
a string with a limited number of significant figures. <br/>
e.g. <code>assert(O.nstr(sd,4) == O.nstr(73.571,4))</code></p>


</td>
<td class="code">
  <div class="highlight"><pre>
<span class="k">local</span> <span class="k">function</span> <span class="nf">nstr</span>(x,n)
  <span class="k">return</span>  string.format(<span class="s">"&#37;."</span>.. n ..<span class="s">"f"</span>,x) <span class="k">end</span>

<span class="k">local</span> <span class="k">function</span> <span class="nf">n5</span>(x,n) <span class="k">return</span> nstr(x,5) <span class="k">end</span>
<span class="k">local</span> <span class="k">function</span> <span class="nf">n4</span>(x,n) <span class="k">return</span> nstr(x,4) <span class="k">end</span>
<span class="k">local</span> <span class="k">function</span> <span class="nf">n3</span>(x,n) <span class="k">return</span> nstr(x,3) <span class="k">end</span>
<span class="k">local</span> <span class="k">function</span> <span class="nf">n2</span>(x,n) <span class="k">return</span> nstr(x,2) <span class="k">end</span>
</pre></div>
</td>
</tr><tr id="section-6">
<td class="docs">
  <div class="pilwrap">
    <a class="pilcrow" href="#section-6">&#182;</a>
  </div>
  
<hr/>


</td>
<td class="code">
  <div class="highlight"><pre><span class="k">local</span> <span class="k">function</span> <span class="nf">main</span>(t) 
  <span class="k">if</span> <span class="nt">next</span>(t) ~= <span class="k">nil</span> <span class="k">then</span> tests(t) <span class="k">end</span> 
  report()
  globals()  <span class="k">end</span>
</pre></div>
</td>
</tr><tr id="section-7">
<td class="docs">
  <div class="pilwrap">
    <a class="pilcrow" href="#section-7">&#182;</a>
  </div>
  
<hr/>


</td>
<td class="code">
  <div class="highlight"><pre><span class="k">return</span> {k=main,nstr=nstr,n2=n2,n3=n3,n4=n4,n5=n5}
</pre></div>
</td>
</tr><tr id="section-8">
<td class="docs">
  <div class="pilwrap">
    <a class="pilcrow" href="#section-8">&#182;</a>
  </div>
  
<hr/>

<h2>Legal</h2>

<p><img align=right width=150 src="https://www.xn--ppensourced-qfb.com/media/reviews/photos/original/e2/b9/b3/22-bsd-3-clause-new-or-revised-modified-license-60-1424101605.png">
LURE, Copyright (c) 2017, Tim Menzies
All rights reserved, BSD 3-Clause License</p>

<p>Redistribution and use in source and binary forms, with
or without modification, are permitted provided that
the following conditions are met:</p>

<ul>
    <li>Redistributions of source code must retain the above
    copyright notice, this list of conditions and the
    following disclaimer.</li>
    <li>Redistributions in binary form must reproduce the
    above copyright notice, this list of conditions and the
    following disclaimer in the documentation and/or other
    materials provided with the distribution.</li>
    <li>Neither the name of the copyright holder nor the names
    of its contributors may be used to endorse or promote
    products derived from this software without specific
    prior written permission.</li>
</ul>

<p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.</p>



</td>
<td class="code">
  <div class="highlight"><pre></pre></div>
</td>
</tr></tbody>
    </table>
  </div>
</body>
</html>
