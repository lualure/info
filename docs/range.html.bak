<!DOCTYPE html>

<html>
<head>
  <title>range</title>
  <meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <link rel="stylesheet" media="all" href="locco.css" />
</head>
<body>
  <div id="container">
    <div id="background"></div>
    
    <table cellpadding="0" cellspacing="0">
      <thead>
        <tr>
          <th class="docs">
            <img width=150 align=right src="https://goo.gl/QabuWK"><h1>
              <a href="https://github.com/lualure/src/blob/master/lib/range.lua">LURE: range</a>
            </h1>
          </th>
          <th class="code">
          </th>
        </tr>
      </thead>
      <tbody>
<tr id="section-1">
<td class="docs">
  <div class="pilwrap">
    <a class="pilcrow" href="#section-1">&#182;</a>
  </div>
  
<img width=150 align=right src="https://goo.gl/QabuWK"><h1>range : simple discretiation</h1>
<p>View the <a href="../range.lua">source on-line</a>.</p>


</td>
<td class="code">
  <div class="highlight"><pre><span class="nt">require</span> <span class="s">"show"</span>
<span class="k">local</span> the=<span class="nt">require</span> <span class="s">"config"</span>
<span class="k">local</span> num=<span class="nt">require</span> <span class="s">"num"</span>
<span class="k">local</span> some=<span class="nt">require</span> <span class="s">"sample"</span>
</pre></div>
</td>
</tr><tr id="section-2">
<td class="docs">
  <div class="pilwrap">
    <a class="pilcrow" href="#section-2">&#182;</a>
  </div>
  
<hr/>
<p>Initialize a table for range info</p>


</td>
<td class="code">
  <div class="highlight"><pre><span class="k">local</span> <span class="k">function</span> <span class="nf">create</span>() <span class="k">return</span> {
  _all= some.create(),
  n  = 0,
  hi = -2^63,
  lo =  2^63,
  span = 2^64} <span class="k">end</span>
</pre></div>
</td>
</tr><tr id="section-3">
<td class="docs">
  <div class="pilwrap">
    <a class="pilcrow" href="#section-3">&#182;</a>
  </div>
  
<hr/>
<p>Update range  <em>i</em>  with
some numuerc <em>x</em> found from within
<em>one</em>.</p>


</td>
<td class="code">
  <div class="highlight"><pre><span class="k">local</span> <span class="k">function</span> <span class="nf">update</span>(i,one, x)
  <span class="k">if</span> x ~= the.ignore <span class="k">then</span>
    some.update(i._all, one)
    i.n = i.n + 1
    <span class="k">if</span> x &gt; i.hi <span class="k">then</span> i.hi = x  <span class="k">end</span>
    <span class="k">if</span> x &lt; i.lo <span class="k">then</span> i.lo = x  <span class="k">end</span>
    i.span = i.hi - i.lo
    <span class="k">return</span> x <span class="k">end</span>  <span class="k">end</span>
</pre></div>
</td>
</tr><tr id="section-4">
<td class="docs">
  <div class="pilwrap">
    <a class="pilcrow" href="#section-4">&#182;</a>
  </div>
  
<hr/>
<p>Update range manager <em>i</em> with
a new range <em>i.now</em>. Push that
range onto the list of all ranges
<em>i.ranges</em>.</p>


</td>
<td class="code">
  <div class="highlight"><pre><span class="k">local</span> <span class="k">function</span> <span class="nf">nextRange</span>(i) 
  i.now  = create()
  i.ranges[#i.ranges+1] = i.now <span class="k">end</span>
</pre></div>
</td>
</tr><tr id="section-5">
<td class="docs">
  <div class="pilwrap">
    <a class="pilcrow" href="#section-5">&#182;</a>
  </div>
  
<hr/>
<p>Initialize a range maneger,</p>


</td>
<td class="code">
  <div class="highlight"><pre><span class="k">local</span> <span class="k">function</span> <span class="nf">rangeManager</span>(lst, x)  
  <span class="k">local</span> _ = { 
    x     = x,
    cohen = the.chop.cohen,
    m     = the.chop.m,
    size  = #lst,
    ranges= {} <span class="c">-- list of all known ranges 
</span>  }
</pre></div>
</td>
</tr><tr id="section-6">
<td class="docs">
  <div class="pilwrap">
    <a class="pilcrow" href="#section-6">&#182;</a>
  </div>
  
<p>Breaks holding under <em>enough</em> are ignored.</p>


</td>
<td class="code">
  <div class="highlight"><pre>  _._.enough = _.size^_.m
  nextRange(_)
  _.num = num.updates(lst, _.x)
  _.hi  = _.num.hi
</pre></div>
</td>
</tr><tr id="section-7">
<td class="docs">
  <div class="pilwrap">
    <a class="pilcrow" href="#section-7">&#182;</a>
  </div>
  
<p>Breaks smaller than <em>epsilon</em> are ignored.</p>


</td>
<td class="code">
  <div class="highlight"><pre>  _._.epsilon= _.num.sd * _.cohen
  <span class="k">return</span> _ <span class="k">end</span>
</pre></div>
</td>
</tr><tr id="section-8">
<td class="docs">
  <div class="pilwrap">
    <a class="pilcrow" href="#section-8">&#182;</a>
  </div>
  
<hr/>
<p>Return a function that </p>

<ul>
    <li>Sorts a <em>lst</em> of
    items according to the values found by
    the function <em>x</em>.</li>
    <li>Then divides that sort into <em>ranges</em>
    of size of at least <em>enough</em> which
    break the <em>lst</em> into items of at least
    <em>epsilon</em> in size.</li>
</ul>


</td>
<td class="code">
  <div class="highlight"><pre><span class="k">return</span> <span class="k">function</span> (lst, x,       last)
  x= x <span class="o">or</span> <span class="k">function</span> (z) <span class="k">return</span> z <span class="k">end</span> <span class="c">-- _x_ defaults to the identity
</span>  table.sort(lst, <span class="k">function</span> (z1,z2) 
                    <span class="k">local</span> one,two=x(z1),x(z2)
                    <span class="k">return</span> one ~=the.ignore <span class="o">and</span> 
                           two ~=the.ignore <span class="o">and</span> 
                           one &lt; two <span class="k">end</span> )
  <span class="k">local</span> i= rangeManager(lst, x)
  <span class="k">for</span> j,one <span class="k">in</span> <span class="nt">pairs</span>(lst) <span class="k">do</span>
    <span class="k">local</span> x1 = x(one)
    <span class="k">if</span> x1 ~= the.ignore <span class="k">then</span>
      update(i.now, one, x1)
      <span class="k">if</span> j &gt; 1 <span class="o">and</span>
         x1 &gt; last <span class="o">and</span>
         i.now.n       &gt; i.enough  <span class="o">and</span>
         i.now.span    &gt; i.epsilon <span class="o">and</span>
         i.num.n - j   &gt; i.enough  <span class="o">and</span>
         i.num.hi - x1 &gt; i.epsilon 
      <span class="k">then</span> nextRange(i) <span class="k">end</span> 
      last = x1  <span class="k">end</span> <span class="k">end</span>
  <span class="k">return</span> i.ranges <span class="k">end</span>
</pre></div>
</td>
</tr></tbody>
    </table>
  </div>
</body>
</html>
