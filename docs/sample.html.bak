<!DOCTYPE html>

<html>
<head>
  <title>sample</title>
  <meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <link rel="stylesheet" media="all" href="locco.css" />
</head>
<body>
  <div id="container">
    <div id="background"></div>
    
    <table cellpadding="0" cellspacing="0">
      <thead>
        <tr>
          <th class="docs">
            <h1>
              /Users/timm/src/lib/sample.lua
            </h1>
          </th>
          <th class="code">
          </th>
        </tr>
      </thead>
      <tbody>
<tr id="section-1">
<td class="docs">
  <div class="pilwrap">
    <a class="pilcrow" href="#section-1">&#182;</a>
  </div>
  


</td>
<td class="code">
  <div class="highlight"><pre>
</pre></div>
</td>
</tr><tr id="section-2">
<td class="docs">
  <div class="pilwrap">
    <a class="pilcrow" href="#section-2">&#182;</a>
  </div>
  
<h2>Keeping a Sample of All</h2>

<p><em>tim@menzies.us</em> <br/>
<em>August'18</em>   </p>



</td>
<td class="code">
  <div class="highlight"><pre>
<span class="k">local</span> the=<span class="nt">require</span> <span class="s">"config"</span>
<span class="k">local</span> R=<span class="nt">require</span> <span class="s">"random"</span>
<span class="k">local</span> LST=<span class="nt">require</span> <span class="s">"lists"</span>
<span class="k">local</span> TILES=<span class="nt">require</span> <span class="s">"tiles"</span>
<span class="k">local</span> SK=<span class="nt">require</span> <span class="s">"sk"</span>
</pre></div>
</td>
</tr><tr id="section-3">
<td class="docs">
  <div class="pilwrap">
    <a class="pilcrow" href="#section-3">&#182;</a>
  </div>
  
<hr/>
<h3>Creation</h3>
<p>Create a watcher that will keep some subset of the watched data.</p>


</td>
<td class="code">
  <div class="highlight"><pre>
<span class="k">local</span> <span class="k">function</span> <span class="nf">create</span>(  most) <span class="k">return</span> {
  _all={},
  n=0,
  most=most <span class="o">or</span> the.sample.most} <span class="k">end</span>
</pre></div>
</td>
</tr><tr id="section-4">
<td class="docs">
  <div class="pilwrap">
    <a class="pilcrow" href="#section-4">&#182;</a>
  </div>
  
<hr/>
<h3>Update</h3>
<p>Update a watcher <code>i</code> with one value <code>x</code>.
If the watcher's cache is not filled, then keep <code>x</code>.
Otherwise, at a probably determined bu the number of
items seen so far, keep <code>x</code></p>


</td>
<td class="code">
  <div class="highlight"><pre>
<span class="k">local</span> <span class="k">function</span> <span class="nf">update</span>(i,x) 
  <span class="k">if</span> x ~= the.ignore <span class="k">then</span>
    i.n = i.n+1
    <span class="k">if</span> #i._all &lt; i.most <span class="k">then</span>
      i._all[#i._all+1] = x
    <span class="k">elseif</span> R.r() &lt; #i._all/i.n <span class="k">then</span>
      i._all [ math.floor(1 + R.r()*#i._all) ] = x
    <span class="k">end</span> <span class="k">end</span>
  <span class="k">return</span> x <span class="k">end</span>
</pre></div>
</td>
</tr><tr id="section-5">
<td class="docs">
  <div class="pilwrap">
    <a class="pilcrow" href="#section-5">&#182;</a>
  </div>
  
<hr/>
<h3>Handy short cut</h3>


</td>
<td class="code">
  <div class="highlight"><pre>
<span class="k">local</span> <span class="k">function</span> <span class="nf">watch</span>()
  <span class="k">local</span> i = create()
  <span class="k">return</span> i, <span class="k">function</span> (x) <span class="k">return</span> update(i,x) <span class="k">end</span> <span class="k">end</span>
</pre></div>
</td>
</tr><tr id="section-6">
<td class="docs">
  <div class="pilwrap">
    <a class="pilcrow" href="#section-6">&#182;</a>
  </div>
  
<hr/>
<h3>Updates</h3>
<p>Update a watcher <code>i</code> with many values from <code>t</code>.
Optionally:</p>

<ul>
    <li>filter every value in <code>t</code> through some function <code>f</code>. </li>
    <li>If an filter every value in <code>t</code> through some function <code>f</code>. </li>
    <li>If an <code>all</code> value is supplied, the update <code>all</code>. Else
    return a new watcher.</li>
</ul>


</td>
<td class="code">
  <div class="highlight"><pre>
<span class="k">local</span> <span class="k">function</span> <span class="nf">updates</span>(t,f,i)
  i = i <span class="o">or</span> create()
  f = f <span class="o">or</span> <span class="k">function</span> (z) <span class="k">return</span> z <span class="k">end</span>
  <span class="k">for</span> _,one <span class="k">in</span> <span class="nt">pairs</span>(t) <span class="k">do</span>
    update(i, f(one)) <span class="k">end</span> 
  <span class="k">return</span> i <span class="k">end</span>
</pre></div>
</td>
</tr><tr id="section-7">
<td class="docs">
  <div class="pilwrap">
    <a class="pilcrow" href="#section-7">&#182;</a>
  </div>
  
<hr/>
<p>dont think this is used. delete?</p>


</td>
<td class="code">
  <div class="highlight"><pre>
<span class="k">local</span> <span class="k">function</span> <span class="nf">xadds</span>(samples)
  out=create()
  <span class="k">for</span> _,sample <span class="k">in</span> <span class="nt">pairs</span>(samples) <span class="k">do</span>
    <span class="k">for</span> _,v <span class="k">in</span> <span class="nt">pairs</span>(sample._all) <span class="k">do</span>
      update(out,v)
    <span class="k">end</span> <span class="k">end</span>
  <span class="k">return</span> v <span class="k">end</span>
</pre></div>
</td>
</tr><tr id="section-8">
<td class="docs">
  <div class="pilwrap">
    <a class="pilcrow" href="#section-8">&#182;</a>
  </div>
  
<hr/>
<h3>Effect size test (non-parametric)</h3>
<p>Count how often lst2 has smaller or bigger numbers than items in lst1.
For the sake of effeciency, <code>lst2</code> is sorted and then explored using
a binary chop.</p>


</td>
<td class="code">
  <div class="highlight"><pre>
<span class="k">local</span> <span class="k">function</span> <span class="nf">cliffsDelta</span>(lst1,lst2)
  table.sort(lst2)
  <span class="k">local</span> lt,gt,max=0,0,#lst2
  <span class="k">for</span> _,one <span class="k">in</span> <span class="nt">pairs</span>(lst1) <span class="k">do</span>
    <span class="k">local</span> pos0 = LST.bsearch(lst2,one)
    <span class="k">local</span> pos = pos0
    <span class="k">while</span> pos &lt; max <span class="o">and</span> lst2[pos] == lst2[pos+1] <span class="k">do</span> pos = pos + 1 <span class="k">end</span>
    gt = gt + max - pos
    <span class="k">local</span> pos = pos0
    <span class="k">while</span> pos &gt; 1   <span class="o">and</span> lst2[pos] == lst2[pos-1] <span class="k">do</span> pos = pos - 1 <span class="k">end</span>
    lt = lt + pos <span class="k">end</span>
  <span class="k">return</span> math.abs(gt - lt) / (#lst1 * #lst2) &gt; the.sample.cliffsDelta <span class="k">end</span>
</pre></div>
</td>
</tr><tr id="section-9">
<td class="docs">
  <div class="pilwrap">
    <a class="pilcrow" href="#section-9">&#182;</a>
  </div>
  
<hr/>
<h3>Statistical significance test (non-parametric)</h3>
<p>The bootstrap hypothesis test from 220 to 223 of Efron's book 
'An introduction to the boostrap'.</p>


</td>
<td class="code">
  <div class="highlight"><pre>
<span class="k">local</span> <span class="k">function</span> <span class="nf">bootstrap</span>(y0,z0)
     <span class="k">local</span> <span class="k">function</span> <span class="nf">sampleWithReplacement</span>(lst)
       <span class="k">local</span> <span class="k">function</span> <span class="nf">n</span>()   <span class="k">return</span> math.floor(R.r() * #lst) + 1 <span class="k">end</span>
       <span class="k">local</span> <span class="k">function</span> <span class="nf">one</span>() <span class="k">return</span> lst[n()] <span class="k">end</span>
       <span class="k">local</span> out={}
       <span class="k">for</span> i=1,#lst <span class="k">do</span> out[i] = one() <span class="k">end</span>
       <span class="k">return</span> out 
     <span class="k">end</span>
     <span class="k">local</span> <span class="k">function</span> <span class="nf">delta</span>(y,z)
       <span class="k">return</span> (y.mu - z.mu) / (10^-64 + (y.sd/y.n + z.sd/z.n)^0.5) 
     <span class="k">end</span>
     <span class="k">local</span> <span class="k">function</span> <span class="nf">updates</span>(i,lst)
       <span class="k">for</span> j=1,#lst <span class="k">do</span>
         <span class="k">local</span> x = lst[j]
         i.all[#i.all + 1] = x
         i.n  = i.n + 1
         <span class="k">local</span> delta = x - i.mu
         i.mu = i.mu + delta / i.n
         i.m2 = i.m2 + delta * (x - i.mu)
         <span class="k">if</span> i.n &gt; 1 <span class="k">then</span>
           i.sd = (i.m2 / (i.n - 1))^0.5 <span class="k">end</span> <span class="k">end</span>
       <span class="k">return</span> i 
     <span class="k">end</span>
     <span class="k">local</span> <span class="k">function</span> <span class="nf">create</span>(lst)
       <span class="k">return</span> updates({sum=0, n=0,mu=0, all={},m2=0,sd=0}, lst) 
     <span class="k">end</span>
     <span class="k">local</span> <span class="k">function</span> <span class="nf">add</span>(i,j)
       <span class="k">return</span> updates( LST.copy(i), j) 
     <span class="k">end</span>
  <span class="k">local</span> y, z = create(y0), create(z0)
  <span class="k">local</span> x    = add(y,z)
  <span class="k">local</span> tobs = delta(y,z)
  <span class="k">local</span> yhat, zhat = {}, {}
  <span class="k">for</span> i=1,#y.all <span class="k">do</span> yhat[i] = y.all[i] - y.mu + x.mu <span class="k">end</span>
  <span class="k">for</span> i=1,#z.all <span class="k">do</span> zhat[i] = z.all[i] - z.mu + x.mu <span class="k">end</span>
  <span class="k">local</span> bigger = 0
  <span class="k">for</span> _ = 1,the.sample.b <span class="k">do</span>
    <span class="k">if</span> delta(create(sampleWithReplacement(yhat)),
             create(sampleWithReplacement(zhat))) &gt; tobs <span class="k">then</span>
      bigger = bigger + 1 <span class="k">end</span> <span class="k">end</span>
  <span class="k">return</span> bigger / the.sample.b &gt; the.num.conf/100 <span class="k">end</span>
</pre></div>
</td>
</tr><tr id="section-10">
<td class="docs">
  <div class="pilwrap">
    <a class="pilcrow" href="#section-10">&#182;</a>
  </div>
  
<hr/>
<h3>Statistical difference</h3>
<p>Two populations are statistically similar if they differ by less
than a trivially small amount; and if they are statistically significantly different.</p>


</td>
<td class="code">
  <div class="highlight"><pre>
<span class="k">local</span> <span class="k">function</span> <span class="nf">same</span>(i,j) 
  <span class="k">return</span> <span class="o">not</span>(cliffsDelta(i,j) <span class="o">and</span> bootstrap(i,j)) <span class="k">end</span>
</pre></div>
</td>
</tr><tr id="section-11">
<td class="docs">
  <div class="pilwrap">
    <a class="pilcrow" href="#section-11">&#182;</a>
  </div>
  
<hr/>
<h3>Rank a set of <code>samples</code></h3>
<p>Sort a list of <em>n</em> <code>samples</code> on their median value
then assignssome number 1 &lt; <em>n</em> to each. Note that any
adjacent samples that are statisticall the same will
get the same rank. Rank out a report of its conclusions.</p>

<p>Most of this code is trivial bookkeeping. The real worker here
is the <a href="sk"><code>SK</code> function</a>. Everything else is collecting the data
required to print out the results on a similiar scale.</p>


</td>
<td class="code">
  <div class="highlight"><pre>
<span class="k">local</span> <span class="k">function</span> <span class="nf">rank</span>(samples,epsilon,ranker) 
  <span class="k">local</span> <span class="k">function</span> <span class="nf">nth</span>(t,n) 
    <span class="k">if</span> n&lt;1       <span class="k">then</span> n=1       <span class="k">end</span>
    <span class="k">if</span> n&gt;#t._all <span class="k">then</span> n=#t._all <span class="k">end</span>
    <span class="k">return</span> t._all[  math.floor(#t._all*n) ] <span class="k">end</span>
  <span class="k">local</span> <span class="k">function</span> <span class="nf">mid</span>(t)   <span class="k">return</span> nth(t,0.5) <span class="k">end</span>
  <span class="k">local</span> <span class="k">function</span> <span class="nf">iqr</span>(t)   <span class="k">return</span> nth(t,0.75) - nth(t,0.25) <span class="k">end</span>
  <span class="k">local</span> fmt =  string.format(<span class="s">"&#37;&#37;2s &#37;s &#37;s &#37;s &#37;&#37;s\n"</span>,
                             the.sample.fmtstr,
                             the.sample.fmtnum,
                             the.sample.fmtnum)
  <span class="k">local</span> lo,hi= 10^64, -10^64
  <span class="k">for</span> _,sample <span class="k">in</span> <span class="nt">pairs</span>(samples) <span class="k">do</span>
    <span class="k">for</span> _,v <span class="k">in</span> <span class="nt">pairs</span>(sample._all) <span class="k">do</span>
      lo = math.min(lo, v)
      hi = math.max(hi, v) <span class="k">end</span>
    table.sort(sample._all)
  <span class="k">end</span> 
  table.sort(samples, <span class="k">function</span>(a,b) <span class="k">return</span> 
             mid(a) &lt; mid(b) <span class="k">end</span> )
  SK(samples,epsilon, 
     ranker <span class="o">or</span> <span class="k">function</span>(i,j) <span class="k">return</span> 
               same(i._all,j._all) <span class="k">end</span>)
  <span class="k">for</span> _,sample <span class="k">in</span> <span class="nt">pairs</span>(samples) <span class="k">do</span>
    <span class="k">local</span> how=TILES.how(sample._all)
    how.lo = lo
    how.hi = hi
    how.fmt = the.sample.fmtnum
    io.write(string.format(fmt, sample.rank, sample.txt <span class="o">or</span> <span class="s">""</span>, 
             mid(sample), iqr(sample),
             TILES.show(sample._all,how))) <span class="k">end</span>  <span class="k">end</span>
</pre></div>
</td>
</tr><tr id="section-12">
<td class="docs">
  <div class="pilwrap">
    <a class="pilcrow" href="#section-12">&#182;</a>
  </div>
  
<hr/>
<p>External  Interface</p>


</td>
<td class="code">
  <div class="highlight"><pre>
<span class="k">return</span> {create=create, same=same, update=update,updates=updates,cliffsDelta=cliffsDelta,
        bootstrap=bootstrap,rank=rank}
</pre></div>
</td>
</tr></tbody>
    </table>
  </div>
</body>
</html>
